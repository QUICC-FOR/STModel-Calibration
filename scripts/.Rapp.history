times     <-seq(0,300,0.5)
out <-as.data.frame(ode(state,times,model,parameters))
model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	dP3 <- c2*a*P3*f3*(X1 + X2) - m*P3#
#
     list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))
plot (times,out$D,type="l",main="[D]",xlab="time",ylab="density")
plot (times,out$P1,type="l",main="[D]",xlab="time, hours",ylab="mol/m3")
par(ask=FALSE)
plot (times,out$P1,type="l",main="[D]",xlab="time, hours",ylab="mol/m3")
mtext(outer=TRUE,side=3,"mtext",cex=1.5)
plot (times,out$P1,type="l",main="",xlab="time",ylab="density")
mtext(outer=TRUE,side=3,"mtext",cex=1.5)
lines (times, out$P2, col="red")
lines (times, out$P3, col="blue")
-----------------------##
 # the model parameters: ##
 #-----------------------##
 parameters<-c(c1=0,#
 			   c2 =0.45,#
 			   alpha=1.5,#
               a=8,#
               m = 0.8,#
               b1=2,#
               b2=2,#
               b3=2)#
#
 #-------------------------##
 # the initial conditions: ##
 #-------------------------##
 state     <-c(X1=0.8,               #
               X2=0.5,#
               X3=1,#
               P1=0.3,#
               P2=0.01,#
               P3=0.1)#
#
 #----------------------##
 # the model equations: ##
 #----------------------##
 model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	dP3 <- ifelse(t>18, c2*a*P3*f3*(X1 + X2) - m*P3, 0.1)#
    list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))#
#
 par(mfrow=c(2,2), oma=c(0,0,3,0))   # set number of plots (mfrow) and margin size (oma)#
#
 plot (times,out$P1,type="l",main="",xlab="time",ylab="density")#
 lines (times, out$P2, col="red")#
 lines (times, out$P3, col="blue")
-----------------------##
 # the model parameters: ##
 #-----------------------##
 parameters<-c(c1=0,#
 			   c2 =0.45,#
 			   alpha=1.5,#
               a=8,#
               m = 0.8,#
               b1=2,#
               b2=2,#
               b3=2)#
#
 #-------------------------##
 # the initial conditions: ##
 #-------------------------##
 state     <-c(X1=0.8,               #
               X2=0.5,#
               X3=1,#
               P1=0.3,#
               P2=0.01,#
               P3=0.1)#
#
 #----------------------##
 # the model equations: ##
 #----------------------##
 model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	if (t>18) dP3 <- c2*a*P3*f3*(X1 + X2) - m*P3#
    list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))#
#
 par(mfrow=c(2,2), oma=c(0,0,3,0))   # set number of plots (mfrow) and margin size (oma)#
#
 plot (times,out$P1,type="l",main="",xlab="time",ylab="density")#
 lines (times, out$P2, col="red")#
 lines (times, out$P3, col="blue")
-----------------------##
 # the model parameters: ##
 #-----------------------##
 parameters<-c(c1=0,#
 			   c2 =0.45,#
 			   alpha=1.5,#
               a=8,#
               m = 0.8,#
               b1=2,#
               b2=2,#
               b3=2)#
#
 #-------------------------##
 # the initial conditions: ##
 #-------------------------##
 state     <-c(X1=0.8,               #
               X2=0.5,#
               X3=1,#
               P1=0.3,#
               P2=0.01,#
               P3=0)#
#
 #----------------------##
 # the model equations: ##
 #----------------------##
 model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{#
  	if(t=18) P3 = 0.1  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	dP3 <- c2*a*P3*f3*(X1 + X2) - m*P3#
    list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))#
#
 par(mfrow=c(2,2), oma=c(0,0,3,0))   # set number of plots (mfrow) and margin size (oma)#
#
 plot (times,out$P1,type="l",main="",xlab="time",ylab="density")#
 lines (times, out$P2, col="red")#
 lines (times, out$P3, col="blue")
-----------------------##
 # the model parameters: ##
 #-----------------------##
 parameters<-c(c1=0,#
 			   c2 =0.45,#
 			   alpha=1.5,#
               a=8,#
               m = 0.8,#
               b1=2,#
               b2=2,#
               b3=2)#
#
 #-------------------------##
 # the initial conditions: ##
 #-------------------------##
 state     <-c(X1=0.8,               #
               X2=0.5,#
               X3=1,#
               P1=0.3,#
               P2=0.01,#
               P3=0)#
#
 #----------------------##
 # the model equations: ##
 #----------------------##
 model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{#
  	if(t==18) P3 = 0.1  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	dP3 <- c2*a*P3*f3*(X1 + X2) - m*P3#
    list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))#
#
 par(mfrow=c(2,2), oma=c(0,0,3,0))   # set number of plots (mfrow) and margin size (oma)#
#
 plot (times,out$P1,type="l",main="",xlab="time",ylab="density")#
 lines (times, out$P2, col="red")#
 lines (times, out$P3, col="blue")
-----------------------##
 # the model parameters: ##
 #-----------------------##
 parameters<-c(c1=0,#
 			   c2 =0.45,#
 			   alpha=1.5,#
               a=8,#
               m = 0.8,#
               b1=2,#
               b2=2,#
               b3=2)#
#
 #-------------------------##
 # the initial conditions: ##
 #-------------------------##
 state     <-c(X1=0.8,               #
               X2=0.5,#
               X3=1,#
               P1=0.3,#
               P2=0.01,#
               P3=0)#
#
 #----------------------##
 # the model equations: ##
 #----------------------##
 model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{#
  	if(t==18) P3 = 0.1  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	dP3 <- c2*a*P3*f3*(X1 + X2) - m*P3#
    list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))#
 plot (times,out$P1,type="l",main="",xlab="time",ylab="density")#
 lines (times, out$P2, col="red")#
 lines (times, out$P3, col="blue")
-----------------------##
 # the model parameters: ##
 #-----------------------##
 parameters<-c(c1=0,#
 			   c2 =0.45,#
 			   alpha=1.5,#
               a=8,#
               m = 0.8,#
               b1=2,#
               b2=2,#
               b3=2)#
#
 #-------------------------##
 # the initial conditions: ##
 #-------------------------##
 state     <-c(X1=0.8,               #
               X2=0.5,#
               X3=1,#
               P1=0.3,#
               P2=0.01,#
               P3=0)#
#
 #----------------------##
 # the model equations: ##
 #----------------------##
 model<-function(t,state,parameters){#
  with(as.list(c(state,parameters)),{#
  	if(t==18) dP3 = 0.1  #
  	f1 <- 1/(1 + b1*X1)#
  	f2 <- 1/(1 + b2*X2)#
  	f3 <- 1/(1 + c2*b3*(X1 + X2))#
  	dX1 <- X1*(1-X1-c1*alpha*X3) - a*X1*(P1*f1 + c2*P3*f3)#
  	dX2 <- X2*(1-X2-c1*alpha*X3) - a*X2*(P2*f2 + c2*P3*f3)#
  	dX3 <- X3*(1-X3-c1*alpha*(X1+X2))#
  	dP1 <- a*P1*f1*X1 - m*P1#
  	dP2 <- a*P2*f2*X2 - m*P2#
  	dP3 <- c2*a*P3*f3*(X1 + X2) - m*P3#
    list(c(dX1,dX2,dX3,dP1,dP2, dP3))          #
     })#
 }#
#
 #----------------------##
 # RUNNING the model:   ##
 #----------------------##
 times     <-seq(0,300,0.5)         #
#
 out <-as.data.frame(ode(state,times,model,parameters))#
 plot (times,out$P1,type="l",main="",xlab="time",ylab="density")#
 lines (times, out$P2, col="red")#
 lines (times, out$P3, col="blue")
p00 = function(colo, extinc) (1-extinc)^2p01 = function(colo, extinc) 2*extinc*(1-colo)p02 = function(colo, extinc) colo^2p11 = function(colo, extinc) (1-colo)*(1-extinc) + extinc*colop12 = function(colo, extinc) colo*(1-extinc)p10 = function(colo, extinc) extinc*(1-colo)p22 = function(colo, extinc) (1-extinc)^2p21 = function(colo, extinc) 2*extinc*(1-extinc)p20 = function(colo, extinc) extinc^2MC.trans = function(cc, ee){PP = matrix(c(p00(cc,ee), p01(cc,ee), p02(cc,ee), p10(cc,ee), p11(cc,ee), p12(cc,ee), p20(cc,ee), p21(cc,ee), p22(cc,ee)), nrow=3, by.row=T)return(PP)}
MC.trans(0.2, 0.1)
MC.trans = function(cc, ee){PP = matrix(c(p00(cc,ee), p01(cc,ee), p02(cc,ee), p10(cc,ee), p11(cc,ee), p12(cc,ee), p20(cc,ee), p21(cc,ee), p22(cc,ee)), nrow=3, byrow=T)return(PP)}MC.trans(0.2, 0.1)
markov = MC.trans(0.2, 0.1)
apply(markov, 1, sum)
p00 = function(colo, extinc) (1-colo)^2p01 = function(colo, extinc) 2*extinc*(1-colo)p02 = function(colo, extinc) colo^2p11 = function(colo, extinc) (1-colo)*(1-extinc) + extinc*colop12 = function(colo, extinc) colo*(1-extinc)p10 = function(colo, extinc) extinc*(1-colo)p22 = function(colo, extinc) (1-extinc)^2p21 = function(colo, extinc) 2*extinc*(1-extinc)p20 = function(colo, extinc) extinc^2MC.trans = function(cc, ee){PP = matrix(c(p00(cc,ee), p01(cc,ee), p02(cc,ee), p10(cc,ee), p11(cc,ee), p12(cc,ee), p20(cc,ee), p21(cc,ee), p22(cc,ee)), nrow=3, byrow=T)return(PP)}markov = MC.trans(0.2, 0.1)apply(markov, 1, sum)
p00 = function(colo, extinc) (1-colo)^2p01 = function(colo, extinc) 2*extinc*(1-colo)p02 = function(colo, extinc) colo^2p11 = function(colo, extinc) (1-colo)*(1-extinc) + extinc*colop12 = function(colo, extinc) colo*(1-extinc)p10 = function(colo, extinc) extinc*(1-colo)p22 = function(colo, extinc) (1-extinc)^2p21 = function(colo, extinc) 2*colo*(1-extinc)p20 = function(colo, extinc) extinc^2MC.trans = function(cc, ee){PP = matrix(c(p00(cc,ee), p01(cc,ee), p02(cc,ee), p10(cc,ee), p11(cc,ee), p12(cc,ee), p20(cc,ee), p21(cc,ee), p22(cc,ee)), nrow=3, byrow=T)return(PP)}markov = MC.trans(0.2, 0.1)
apply(markov, 1, sum)
eigen(t(markov))
p00 = function(colo, extinc) (1-colo)^2p01 = function(colo, extinc) 2*extinc*(1-extinc)p02 = function(colo, extinc) colo^2p11 = function(colo, extinc) (1-colo)*(1-extinc) + extinc*colop12 = function(colo, extinc) colo*(1-extinc)p10 = function(colo, extinc) extinc*(1-colo)p22 = function(colo, extinc) (1-extinc)^2p21 = function(colo, extinc) 2*colo*(1-colo)p20 = function(colo, extinc) extinc^2MC.trans = function(cc, ee){PP = matrix(c(p00(cc,ee), p01(cc,ee), p02(cc,ee), p10(cc,ee), p11(cc,ee), p12(cc,ee), p20(cc,ee), p21(cc,ee), p22(cc,ee)), nrow=3, byrow=T)return(PP)}markov = MC.trans(0.2, 0.1)apply(markov, 1, sum)
p00 = function(colo, extinc) (1-colo)^2p01 = function(colo, extinc) 2*colo*(1-colo)p02 = function(colo, extinc) colo^2p11 = function(colo, extinc) (1-colo)*(1-extinc) + extinc*colop12 = function(colo, extinc) colo*(1-extinc)p10 = function(colo, extinc) extinc*(1-colo)p22 = function(colo, extinc) (1-extinc)^2p21 = function(colo, extinc) 2*extinc*(1-extinc)p20 = function(colo, extinc) extinc^2MC.trans = function(cc, ee){PP = matrix(c(p00(cc,ee), p01(cc,ee), p02(cc,ee), p10(cc,ee), p11(cc,ee), p12(cc,ee), p20(cc,ee), p21(cc,ee), p22(cc,ee)), nrow=3, byrow=T)return(PP)}markov = MC.trans(0.2, 0.1)apply(markov, 1, sum)
eigen(t(markov))$vectors
eigen(t(markov))
eigen(t(markov))[,1]/sum(eigen(t(markov))[,1])
eigen(t(markov))[,1]
eigen(t(markov))[[1]][,1]
eigen(t(markov))$vectors[,1]/sum(eigen(t(markov))[,1])
eigen(t(markov))$vectors[,1]
eigen(t(markov))$vectors[,1]/sum(eigen(t(markov))$vectors[,1])
markov = MC.trans(0.3, 0.1)#testapply(markov, 1, sum)#valeurs a equilibre TRANSPOSER POUR VALP A GAUCHEeigen(t(markov))#2eme valp -> vitesse de convergence #1er vectp -> valeur a equilibre IL FAUT NORMALISER !!eigen(t(markov))$vectors[,1]/sum(eigen(t(markov))$vectors[,1])
5/6
15/60
10/25
cd /Library/Frameworks/R.framework/Resources/share/texmf/tex32/136
32/136
q()
sfInit(parallel=TRUE,cpus=2)
install.packages("snowfall")
library(rjaps)
library(rjags)
q()
k=1; u = 6000; v= 3000; w= 3000; x= 3000; taub = 6; thetab =5mub = nub = 30rb=20; pb = mb = 0.05; qb=0.8; zb=10R = seq(0,1,0.01)TBM = seq(0,1,.01)plan = expand.grid(R, TBM)Ikb = mb + pb + lambertWp(qb*zb*exp(-zb*(mb+pb)))/zb
library(pracma) #lambertWp
------------------------------------------k=1; u = 6000; v= 3000; w= 3000; x= 3000; taub = 6; thetab =5mub = nub = 30rb=20; pb = mb = 0.05; qb=0.8; zb=10R = seq(0,1,0.01)TBM = seq(0,1,.01)plan = expand.grid(R, TBM)Ikb = mb + pb + lambertWp(qb*zb*exp(-zb*(mb+pb)))/zb
------------------------------------------# conditions existence Herbivores#------------------------------------------library(pracma) #lambertWp# moose#------------------------------------------k=1; ua = 6000; va= 3000; wa= 3000; xa= 3000; taua = 6; thetaa =5mua = nua = 30ra=20; pa = ma = 0.05; qa=0.8; za=10R = seq(0,1,0.01)TBM = seq(0,1,.01)plan = expand.grid(R, TBM)Ika = ma + pa + lambertWp(qa*za*exp(-za*(ma+pa)))/za#
intakeHa <- function(Veget, Ikb, Hv=1000){R = Veget[1]TBM = Veget[2]Ia = taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha))Ja = (thetaa*k*(TBM*(va*wa+xa)/3)/Ha)/(nua + k* (TBM*(va*wa+xa)/3)/Ha) * 1/( 1+exp( ra*( taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha)) -pa-ma ) ) )return(Ia+Ja)}Intake_a = apply(plan, 1, intakeHa)
------------------------------------------# conditions existence Herbivores#------------------------------------------library(pracma) #lambertWp# moose#------------------------------------------k=1; ua = 6000; va= 3000; wa= 3000; xa= 3000; taua = 6; thetaa =5mua = nua = 30ra=20; pa = ma = 0.05; qa=0.8; za=10R = seq(0,1,0.01)TBM = seq(0,1,.01)plan = expand.grid(R, TBM)Ika = ma + pa + lambertWp(qa*za*exp(-za*(ma+pa)))/za#
intakeHa <- function(Veget, Ikb, Hv=1000){R = Veget[1]TBM = Veget[2]Ia = taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha))Ja = (thetaa*k*(TBM*(va+wa+xa)/3)/Ha)/(nua + k* (TBM*(va+wa+xa)/3)/Ha) * 1/( 1+exp( ra*( taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha)) -pa-ma ) ) )return(Ia+Ja)}Intake_a = apply(plan, 1, intakeHa)
library(pracma) #lambertWp# moose#------------------------------------------k=1; ua = 6000; va= 3000; wa= 3000; xa= 3000; taua = 6; thetaa =5mua = nua = 30ra=20; pa = ma = 0.05; qa=0.8; za=10R = seq(0,1,0.01)TBM = seq(0,1,.01)plan = expand.grid(R, TBM)Ika = ma + pa + lambertWp(qa*za*exp(-za*(ma+pa)))/za#
intakeHa <- function(Veget, Ikb, Hv=1000){R = Veget[1]TBM = Veget[2]Ia = taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha))Ja = (thetaa*k*(TBM*(va+wa+xa)/3)/Ha)/(nua + k* (TBM*(va+wa+xa)/3)/Ha) * 1/( 1+exp( ra*( taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha)) -pa-ma ) ) )return(Ia+Ja)}Intake_a = apply(plan, 1, intakeHa)
------------------------------------------# conditions existence Herbivores#------------------------------------------library(pracma) #lambertWp# moose#------------------------------------------k=1; ua = 6000; va= 3000; wa= 3000; xa= 3000; taua = 6; thetaa =5mua = nua = 30ra=20; pa = ma = 0.05; qa=0.8; za=10R = seq(0,1,0.01)TBM = seq(0,1,.01)plan = expand.grid(R, TBM)Ika = ma + pa + lambertWp(qa*za*exp(-za*(ma+pa)))/za#
intakeHa <- function(Veget, Ikb, Ha=1000){R = Veget[1]TBM = Veget[2]Ia = taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha))Ja = (thetaa*k*(TBM*(va+wa+xa)/3)/Ha)/(nua + k* (TBM*(va+wa+xa)/3)/Ha) * 1/( 1+exp( ra*( taua*k*ua*(R/Ha)/(mua + k*ua*(R/Ha)) -pa-ma ) ) )return(Ia+Ja)}Intake_a = apply(plan, 1, intakeHa)
Intake_a
TBMiso = function(Riso, Ha=1000){A = (1+exp( ra*( taua*k*ua*(Riso/Ha)/(mua + k*ua*(Riso/Ha)) -pa-ma ))) *(Ika - (taua*k*ua*(Riso/Ha))/(mua+k*ua*(Riso/Ha)))T = - Ha *A*nua/((va+wa+xa)/3)*(A-thetaa))return(T)}
TBMiso = function(Riso, Ha=1000){A = (1+exp( ra*( taua*k*ua*(Riso/Ha)/(mua + k*ua*(Riso/Ha)) -pa-ma ))) *(Ika - (taua*k*ua*(Riso/Ha))/(mua+k*ua*(Riso/Ha)))T = - Ha *A*nua/(((va+wa+xa)/3)*(A-thetaa))return(T)}
image(TBM, R , matrix(Intake_a, ncol=length(T)), col=rev(heat.colors(10)))
image(TBM, R , matrix(Intake_a, ncol=length(TBM)), col=rev(heat.colors(10)))
image(TBM, R, matrix(ifelse(apply(plan, 1, sum)<1, 1, 0), ncol=length(TBM)), col=c(rgb(0,0,0, 1),rgb(1,1,1,0)), add=TRUE)
lines(TBMiso(Riso), R)
lines(TBMiso(R), R)
image(R, TBM , matrix(Intake_a, ncol=length(R)), col=rev(heat.colors(10)))
lines( R,TBMiso(R))
F1 = seq(0,200,1)tau = 5; mu = 20; I1 = tau*F1/(mu + F1)
par(mfrow = c(1,2))plot(I1~F1, type ="l", ylim = c(0,tau*1.1), xaxt="n", yaxt="n", ylab = "Intake rate", xlab="Available resource", bty="n")abline(v=mu, lty=2)axis(1, at = mu, labels="mu", las = 1, cex.axis =0.7)abline(h=tau/2, lty=2)axis(2, at = tau/2, labels="tau/2 \n(theta/2)", las = 1, cex.axis =0.7)abline(h=tau, lty=2)axis(2, at = tau, labels="tau \n(theta)", las = 1, cex.axis =0.7)abline(h=0)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0",las = 1,  cex.axis =0.7, tick=F)
par(mfrow = c(1,2))plot(I1~F1, type ="l", ylim = c(0,tau*1.1), xaxt="n", yaxt="n", ylab = "Intake rate", xlab="Available resource", bty="n")abline(v=mu, lty=2)axis(1, at = mu, labels="mu", las = 1, cex.axis =0.7)abline(h=tau/2, lty=2)axis(2, at = tau/2, labels="tau/2)", las = 1, cex.axis =0.7)abline(h=tau, lty=2)axis(2, at = tau, labels="tau", las = 1, cex.axis =0.7)abline(h=0)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0",las = 1,  cex.axis =0.7, tick=F)
par(mfrow = c(1,2))plot(I1~F1, type ="l", ylim = c(0,tau*1.1), xaxt="n", yaxt="n", ylab = "Intake rate", xlab="Available resource", bty="n")abline(v=mu, lty=2)axis(1, at = mu, labels="mu \n(or nu)", las = 1, cex.axis =0.7)abline(h=tau/2, lty=2)axis(2, at = tau/2, labels="tau/2)", las = 1, cex.axis =0.7)abline(h=tau, lty=2)axis(2, at = tau, labels="tau", las = 1, cex.axis =0.7)abline(h=0)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0",las = 1,  cex.axis =0.7, tick=F)
r=20; I1 = seq(0,1,0.01)I2 = 1/(1+exp(r*(I1-p-m)))
Intake = seq(0,100,0.01)p = 0.1; q = 0.7; z = .2; m=0.1;M = p+q*exp(-z*Intake)+m
r=20; I1 = seq(0,1,0.01)I2 = 1/(1+exp(r*(I1-p-m)))
plot(I2~I1, type ="l", xlim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)
r=20; I1 = seq(0,1,0.01)phi = 0.8I2 = phi/(phi+exp(r*(I1-p-m)))plot(I2~I1, type ="l", xlim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(h=phi, lty=2)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)
r=20; I1 = seq(0,1,0.01)phi = 0.8I2 = 1/(phi+exp(r*(I1-p-m)))plot(I2~I1, type ="l", xlim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(h=phi, lty=2)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)
r=20; I1 = seq(0,1,0.01)phi = 0.8I2 = phi/(1+exp(r*(I1-p-m)))plot(I2~I1, type ="l", xlim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(h=phi, lty=2)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)
r=20; I1 = seq(0,1,0.01)phi = 0.8I2 = phi/(1+exp(r*(I1-p-m)))plot(I2~I1, type ="l", xlim = c(0,1), ylim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(h=phi, lty=2)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)
r=20; I1 = seq(0,1,0.01)phi = 0.8I2 = phi/(1+exp(r*(I1-p-m)))plot(I2~I1, type ="l", xlim = c(0,1), ylim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(2, at = phi, labels="phi", las = 1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(h=phi, lty=2)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)
Intake = seq(0,100,0.01)p = 0.1; q = 0.7; z = .2; m=0.1;M = p+q*exp(-z*Intake)+m
F1 = seq(0,200,1)tau = 5; mu = 20; I1 = tau*F1/(mu + F1)pdf("../graphs/intakes.pdf", height=4, width=7)par(mfrow = c(1,2))plot(I1~F1, type ="l", ylim = c(0,tau*1.1), xaxt="n", yaxt="n", ylab = "Intake rate", xlab="Available resource", bty="n")abline(v=mu, lty=2)axis(1, at = mu, labels="mu \n(or nu)", las = 1, cex.axis =0.7)abline(h=tau/2, lty=2)axis(2, at = tau/2, labels="tau/2)", las = 1, cex.axis =0.7)abline(h=tau, lty=2)axis(2, at = tau, labels="tau", las = 1, cex.axis =0.7)abline(h=0)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0",las = 1,  cex.axis =0.7, tick=F)#------------------------------------------r=20; I1 = seq(0,1,0.01)phi = 0.8I2 = phi/(1+exp(r*(I1-p-m)))plot(I2~I1, type ="l", xlim = c(0,1), ylim = c(0,1), xaxt="n", yaxt="n", ylab = "Coefficient for non-preferred resource", xlab="Intake of preferred resource", bty="n")abline(v=p+m, lty=2)axis(2, at = 1, labels="1", las = 1, cex.axis =0.7)axis(2, at = phi, labels="phi", las =
1, cex.axis =0.7)axis(1, at = p+m, labels="p+m", cex.axis =0.7)abline(h=0)abline(h=phi, lty=2)abline(v=0)axis(1, at = 0, labels="0", cex.axis =0.7, tick=F)axis(2, at = 0, labels="0", las = 1, cex.axis =0.7, tick=F)#
dev.off()
Ha = Hv = seq(0,1,0.1)
expand.grid(Ha, Hv)
Htable = expand.grid(Ha, Hv)
kk = data.frame(apply(Htable, 1, function(x){exp(-0.5*x[2]/x[1])}))
kk
image(kk)
image(Ha, Hv, matrix(kk, ncol=length(Ha)), col=rev(heat.colors(10)))
kk
kk = unlist(apply(Htable, 1, function(x){exp(-0.5*x[2]/x[1])}))
image(Ha, Hv, matrix(kk, ncol=length(Ha)), col=rev(heat.colors(10)))
matrix(kk, ncol=length(Ha))
exp(0.5)
exp(-0.5)
exp(-ln(0.5))
exp(-log(0.5))
exp(-log(1/0.5))
kk = unlist(apply(Htable, 1, function(x){exp(-log(1/0.5)*x[2]/x[1])}))
matrix(kk, ncol=length(Ha))
image(Ha, Hv, matrix(kk, ncol=length(Ha)), col=rev(heat.colors(10)))
summary(kk)
hist(kk)
Ptable = expand.grid(Ha, Hv, PT)
PT = seq(0,1,0.1)
Ptable = expand.grid(Ha, Hv, PT)
kk = unlist(apply(Htable, 1, function(x){x[3]*exp(-log(1/0.5)*x[2]/x[1])}))
split(kk, Ptable$Ha)
head(kk)
kk
Ptable
kk = unlist(apply(Ptable, 1, function(x){x[3]*exp(-log(1/0.5)*x[2]/x[1])}))
kk
head(PTable)
head(Ptable)
kk[Ptable[,1]==1]
sel = kk[Ptable[,1]==1]
sel = Ptable[,1]==1
plot(Ptable[sel,3], kk[sel])
kk = unlist(apply(Ptable, 1, function(x){x[3]*(exp(-log(1/0.5)*x[2]/x[1])-0.5) + 0.5}))
plot(Ptable[sel,3], kk[sel])
sel = Ptable[,2]==1
plot(Ptable[sel,3], kk[sel])
sel = Ptable[,2]==0
plot(Ptable[sel,3], kk[sel])
sel = Ptable[,1]==0
plot(Ptable[sel,3], kk[sel])
PT = seq(0,1,0.1)Ptable = expand.grid(Ha, Hv, PT)kk = unlist(apply(Ptable, 1, function(x){x[3]*(exp(-log(1/0.5)*(1-x[1])/(1-x[2])-0.5) + 0.5}))
kk = unlist(apply(Ptable, 1, function(x){x[3]*(exp(-log(1/0.5)*((1-x[1])/(1-x[2]))-0.5) + 0.5}))
kk = unlist(apply(Ptable, 1, function(x){x[3]*(exp(-log(1/0.5)*((1-x[1])/(1-x[2])))-0.5) + 0.5}))
sel = Ptable[,1]==1
plot(Ptable[sel,3], kk[sel])
sel = Ptable[,1]==0
plot(Ptable[sel,3], kk[sel])
x <- c("A and B", "A, B and C", "A, B, C and D", "foobar")#
pattern <- "[[:space:]]*(,|and)[[:space:]]"#
## Match data from regexpr()#
m <- regexpr(pattern, x)#
regmatches(x, m)#
regmatches(x, m, invert = TRUE)
x = "je suis; certaine que ;Temperature; peut marcher"
pattern = "([:alpha:])+;"
m = regexpr(pattern, x)
m
regmachtes(x,m)
regmatches(x,m)
pattern = "([:alpha:])+;"
x
pattern = "[:alpha:]+;"
m = regexpr(pattern, x)
m
regmatches(x,m, invert=T)
pattern = "[[:alpha:]]+;"
m = regexpr(pattern, x)
m
regmatches(x,m, invert=T)
regmatches(x,m, invert=F)
pattern = "[[:a-zA-z:]]+;"
m = regexpr(pattern, x)
pattern = "[[:a-zA-Z:]]+;"
m = regexpr(pattern, x)
pattern = "[[:alpha:]]+;"
m = regexpr(pattern, x)
m
regmatches(x,m, invert=T)
regmatches(x,m, invert=F)
pattern = "[[:alpha:]]+;"x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "([:alpha:])+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "([:alpha:])+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "([:alpha:])+;"#
m = regexpr(pattern, x)#
regmatches(x,m)x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
x = "je suis; certaine que ; Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
x = "je suis; certaine que ;temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
?regmatches
x = "je suis; certaine que ;temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = regexec(pattern, x)#
regmatches(x,m)
x = "je suis certaine que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = regexpr(pattern, x)#
regmatches(x,m)
m
x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = grep(pattern, x)#
regmatches(x,m)
m
m = gregexpr(pattern, x)
m
regmatches(x,m)
x = "je suis; certaine que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = grep(pattern, x)#
regmatches(x,m)x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = gregexpr(pattern, x)#
regmatches(x,m)x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = gregexpr(pattern, x)#
regmatches(x,m)
x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher"#
pattern = "[[:alpha:]]+;"#
m = gregexpr(pattern, x)#
regmatches(x,m)
m
regexec([[0-9]], x)
regexec("[0-9]", x)
x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher 45°"#
pattern = "[[:alpha:]]+;"#
m = gregexpr(pattern, x)#
regmatches(x,m)
regexec("[0-9]", x)
regexpr("[0-9]", x)
regexpr("[0-9]", x)+1
x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher 45°"#
pattern = "[[:alpha:]]+;"#
m = gregexpr(pattern, x)#
regmatches(x,m[m<regexpr("[0-9]", x)])
m
m[which(m<regexpr("[0-9]", x)])
m<regexpr("[0-9]", x)
regexpr("[0-9]", x)
m
m[[1]]<regexpr("[0-9]", x)
m[which(m[[1]]<regexpr("[0-9]", x)])
m[which(m[[1]]<regexpr("[0-9]", x))]
which(m[[1]]<regexpr("[0-9]", x))
m[which(m[[1]]<regexpr("[0-9]", x))]
m[[1]][which(m[[1]]<regexpr("[0-9]", x))]
regmatches(x,m[[1]][which(m[[1]]<regexpr("[0-9]", x)]))
regmatches(x,m[[1]][which(m[[1]]<regexpr("[0-9]", x))])
x
m
x = strplit(x, regexpr("[0-9]", x))[[1]]
x = strsplit(x, regexpr("[0-9]", x))[[1]]
x
x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher 45°"#
x = strsplit(x, "[0-9]")[[1]]
x
x = "je suis; certaine; depuis 0 que ;Temperature; peut marcher 45°"#
x = strsplit(x, "[0-9]")[[1]][1]#
pattern = "[[:alpha:]]+;"#
m = gregexpr(pattern, x)#
regmatches(x,m)
setwd('/Users/isabelle/Documents/RESEARCH/ANALYSES/2014_FATEHD_Bay_Glacier/Analyses')
library(coda)
install.packages("coda")
install.pacakges("rjags")
install.packages("rjags")
library(c0da)
library(coda)
library(rjags)
library(rjags, type = "source")
install.packages("rjags", type = "source")
library(rjags)
install.packages("rjags")
library(rjags)
load("~/Documents/RESEARCH/RECHERCHE/2008-2013 LECA/GroupesFct/V3_Groupes Ecrins Périph/B-Groupement/tr2")
ls()
head(tr2)
load("~/Documents/RESEARCH/RECHERCHE/2008-2013 LECA/GroupesFct/V3_Groupes Ecrins Périph/B-Groupement/Analyses groupes/tab_traits_gpes")
ls()
tab2
rm(list=ls())source("4-init_params.R")source("3-transition_model.R")# Maximum likelihood estimationlibrary(GenSA)
setwd('/Users/isabelle/Documents/RESEARCH/RECHERCHE/2013-2015 UQAR/QUICCFOR/STModel-Calibration/scripts')
rm(list=ls())source("4-init_params.R")source("3-transition_model.R")# Maximum likelihood estimationlibrary(GenSA)
?GenSA
1000/6
100/6
estim.pars = GenSA(par = params, fn = model, lower = par_lo, upper= par_hi, control = list(maxit = 1000, verbose =TRUE), dat = data, max.time = 100)
estim.pars = GenSA(par = params, fn = model, lower = par_lo, upper= par_hi, control = list(maxit = 1000, verbose =TRUE, max.time = 100), dat = data)
warnings()
log(1)
log(0)
log(.Machine$double.xmin)
log(lik)
lik
rm(list=ls())source("4-init_params.R")source("3-transition_model.R")# Maximum likelihood estimationlibrary(GenSA)estim.pars = GenSA(par = params, fn = model, lower = par_lo, upper= par_hi, control = list(verbose =TRUE, max.time = 100, smooth=FALSE), dat = data)
warnings()
model_transition(params, data)
model
model(params, data)
debug(mode)
Q
Q
Q
Q
